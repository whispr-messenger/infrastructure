apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: selfsigned
  namespace: istio-system
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: istio-ca
  namespace: istio-system
spec:
  isCA: true
  commonName: istio-ca
  secretName: istio-ca
  duration: 2160h # 90 days
  renewBefore: 360h # 15 days
  subject:
    organizationalUnits:
    - cert-manager
    - cluster.local
  issuerRef:
    name: selfsigned
    kind: Issuer
    group: cert-manager.io
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: istio-ca
  namespace: istio-system
spec:
  ca:
    secretName: istio-ca
---
# Job to extract the CA certificate and create the root-ca secret for istio-csr
apiVersion: batch/v1
kind: Job
metadata:
  name: istio-root-ca-extractor
  namespace: istio-system
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  template:
    spec:
      serviceAccountName: istio-root-ca-extractor
      containers:
      - name: extractor
        image: bitnami/kubectl:1.28
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            memory: 256Mi
        command:
        - /bin/bash
        - -c
        - |
          # Wait for the istio-ca secret to be available
          echo "Waiting for istio-ca secret..."
          kubectl wait --for=condition=Ready certificate/istio-ca -n istio-system --timeout=300s
          
          # Extract the CA certificate
          echo "Extracting CA certificate..."
          kubectl get secret istio-ca -n istio-system -o jsonpath="{.data['tls.crt']}" | base64 -d > /tmp/ca.pem
          
          # Create the root-ca secret for istio-csr in cert-manager namespace
          echo "Creating istio-root-ca secret in cert-manager namespace..."
          kubectl create secret generic istio-root-ca -n cert-manager --from-file=ca.pem=/tmp/ca.pem --dry-run=client -o yaml | kubectl apply -f -
          
          echo "Root CA secret created successfully"
      restartPolicy: OnFailure
  backoffLimit: 3
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-root-ca-extractor
  namespace: istio-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: istio-root-ca-extractor
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch"]
- apiGroups: ["cert-manager.io"]
  resources: ["certificates"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: istio-root-ca-extractor
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-root-ca-extractor
subjects:
- kind: ServiceAccount
  name: istio-root-ca-extractor
  namespace: istio-system