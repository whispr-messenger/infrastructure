apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: gateway
  namespace: whispr-prod
spec:
  selector:
    istio: ingressgateway # --> CRD will configure all pods Gateway which have this label, so this pod will be configured
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - whispr.app
        - www.whispr.app
        #- api.whispr.app
      tls:
        httpsRedirect: true

    - port:
        number: 443
        name: https
        protocol: HTTPS
      hosts:
        - whispr.app
        - www.whispr.app
        #- api.whispr.app
      tls:
        mode: SIMPLE
        credentialName: istio-gateway-tls
        minProtocolVersion: TLSV1_2

---
apiVersion: networking.istio.io/v1
kind: VirtualService # --> # Define where to route the requests
metadata:
  name: app-routes
  namespace: whispr-prod
spec:
  hosts:
    #- "test.local"
    - whispr.app
    - www.whispr.app
    # - api.whispr.app
  gateways:
    - gateway # VirtualService is attached to the test-gateway without that the traffic will only apply to the mesh (internal traffic)
  http:
    # --> Rules HTTP in order, fist to match win
    # API via whispr.app/api
    - match:
        - uri:
            prefix: "/api"
          authority:
            exact: whispr.app
      route:
        - destination:
            host: app-b.whispr-prod.svc.cluster.local # by FQDN
            port:
              number: 80
    # -> Exemple: http://test.local/api/users → App B

    # WWW redirect --> whispr.app
    - match:
      - uri:
        prefix: /
        authority:
          exact: www.whispr.app
      redirect:
        authority: whispr.app
        redirectCode: 301

    # Catch all
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: app-a.whispr-prod.svc.cluster.local # by FQDN
            port:
              number: 80

  # --> Exemple: http://test.local/ → App A
  # --> Exemple: http://test.local/index.html → App A
